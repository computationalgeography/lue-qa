# configfile: "config.yaml"


# params:
#     hostname=config["hostname"],
#     command=config["command"]


def input_pathnames(wildcards):
    """
    Given the wildcards called hostname, experiment, command, and worker, return a list of
    input files used in the rule
    """
    result_prefix = config["result_prefix"]
    prefix = config["lue_qa"]
    cluster_prefix=f"{prefix}/configuration"
    experiment_prefix=f"{prefix}/experiment/configuration/{wildcards.command}"

    # General, experiment and worker configs are rooted at:
    # prefix/cluster
    # prefix/cluster/experiment
    # → This is stuff not related to the actual command and the data being used

    # Experiment configs are rooted at:
    # prefix/cluster/experiment
    # → This is stuff not (directly) related to the actual cluster, experiment and worker being used

    # These all have to exist!

    return {
            # "result_prefix":
            #     f"{result_prefix}",
            "cluster":
                f"{cluster_prefix}/{wildcards.hostname}/cluster.json",
            "worker":
                f"{cluster_prefix}/{wildcards.hostname}/{wildcards.worker}/{wildcards.experiment}.json",
            # TODO Ditch experiment stuff. It is command and data config, per kind of worker.
            "experiment":
                # f"{experiment_prefix}/{wildcards.hostname}/{wildcards.command}/{wildcards.experiment}/{wildcards.worker}.json",
                f"{experiment_prefix}/{wildcards.hostname}/{wildcards.command}/{wildcards.worker}/{wildcards.experiment}.json",
        }


def create_script_input_pathnames(wildcards):

    input = input_pathnames(wildcards)

    return input


# def execute_script_input_pathnames(wildcards):
# 
#     return {
#             "script":
#                 f"{wildcards.result_prefix}/{wildcards.hostname}/{wildcards.command}/{wildcards.worker}/{wildcards.experiment}.sh",
#         }


def import_input_pathnames(wildcards):

    result_prefix = config["result_prefix"]

    input = input_pathnames(wildcards)
    input["execute.done"] = \
        f"{result_prefix}/{wildcards.hostname}/{wildcards.command}/{wildcards.worker}/{wildcards.experiment}/execute.done"
    input["script"] = \
        f"{result_prefix}/{wildcards.hostname}/{wildcards.command}/{wildcards.worker}/{wildcards.experiment}/{wildcards.experiment}.sh"

    return input


def postprocess_input_pathnames(wildcards):

    result_prefix = config["result_prefix"]

    input = input_pathnames(wildcards)
    input["import.done"] = \
        f"{result_prefix}/{wildcards.hostname}/{wildcards.command}/{wildcards.worker}/{wildcards.experiment}/import.done"
    input["script"] = \
        f"{result_prefix}/{wildcards.hostname}/{wildcards.command}/{wildcards.worker}/{wildcards.experiment}/{wildcards.experiment}.sh"

    return input


rule script:
    output:
        # Shell script
        script="{result_prefix}/{hostname}/{command}/{worker}/{experiment}/{experiment}.sh",
        # Output data file with some initial contents, including the shell script itself
        data="{result_prefix}/{hostname}/{command}/{worker}/{experiment}/raw.lue"
    input:
        unpack(create_script_input_pathnames)
    wildcard_constraints:
        hostname="[^/]+",
        command="[^/]+",
        worker="[^/]+",
        experiment="[^/]+"
    params:
        result_prefix=config["result_prefix"]
    shell:
        "lue_scalability {wildcards.experiment} script {wildcards.command} {params.result_prefix} {input.cluster} {input.worker} {input.experiment} {output.script}"


# TODO We need to wait on the json files(?). Which ones depends on the experiment and cluster...
# This rule executes the shell script contains commands. These command may execute
# asynchronously. Check your job queue, etc.
rule execute:
    output:
        # data="{hostname}/{command}/{worker}/{experiment}/raw.lue"
        # TODO Lots of json files too. Can we wait on all of them here. Parse a json an determine on which once to wait?
        #      Maybe list them here using an output rule thingy?
        touch("{result_prefix}/{hostname}/{command}/{worker}/{experiment}/execute.done")
    input:
        rules.script.output.script
    wildcard_constraints:
        hostname="[^/]+",
        command="[^/]+",
        worker="[^/]+",
        experiment="[^/]+"
    params:
        result_prefix=config["result_prefix"]
    shell:
        "bash {input}"


rule import:
    output:
        touch("{result_prefix}/{hostname}/{command}/{worker}/{experiment}/import.done")
    input:
        unpack(import_input_pathnames)
    wildcard_constraints:
        hostname="[^/]+",
        command="[^/]+",
        worker="[^/]+",
        experiment="[^/]+"
    params:
        result_prefix=config["result_prefix"]
    shell:
        "lue_scalability {wildcards.experiment} import {wildcards.command} {params.result_prefix} {input.cluster} {input.worker} {input.experiment} {input.script}"


rule postprocess:
    output:
        touch("{result_prefix}/{hostname}/{command}/{worker}/{experiment}/postprocess.done")
    input:
        unpack(postprocess_input_pathnames)
    wildcard_constraints:
        hostname="[^/]+",
        command="[^/]+",
        worker="[^/]+",
        experiment="[^/]+"
    params:
        result_prefix=config["result_prefix"]
    shell:
        "lue_scalability {wildcards.experiment} postprocess {wildcards.command} {params.result_prefix} {input.cluster} {input.worker} {input.experiment} {input.script}"




### # When creating raw.lue, prefer execute over script
### ruleorder: execute > script
